/*
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.paytm.ionicpaytm;

import org.apache.cordova.*;
import java.util.List;
import org.apache.cordova.CallbackContext;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import android.os.Bundle;
import android.util.Log;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import io.ionic.starter.MainActivity;
import com.paytm.pgsdk.PaytmOrder;
import com.paytm.pgsdk.PaytmPGService;
import com.paytm.pgsdk.PaytmPaymentTransactionCallback;
public class IonicPaytm extends CordovaPlugin {

    // private static final String Sendsomething="Add";
    private static final String DoTransaction="StartTransaction";//storing the string
    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext)
                            throws JSONException {


        if(action.equals(DoTransaction)){//checking if the function name is starttransaction
                this.StartPaytmTransaction(args,callbackContext);
                 return true;

        } else {//else showing error
            callbackContext.error("Incorrect action parameter: " + action);
        }

        return false;
    }


   

    public void StartPaytmTransaction(JSONArray args,CallbackContext callbackContext){
                        // callbackContext.error("ok ");

        try{
          String Orderid= args.getJSONObject(0).getString("oid");  //getitng order id
          String CHECKSUMHASH=args.getJSONObject(0).getString("checksumhash");//getting the checksumhash to give to the sdk
          String Callbackurl= args.getJSONObject(0).getString("callback_url");//getting the callback url
          String Customer_id=args.getJSONObject(0).getString("Customer_id");//gettting the customer id
          String mobile_no=args.getJSONObject(0).getString("mobile_no");  //getting the mobile no
          String email=args.getJSONObject(0).getString("email");  //getting the email
          String web_staging=args.getJSONObject(0).getString("web_staging");  //getting the website type WEBSTAGING or APPSTAGING 
          String channel_id=args.getJSONObject(0).getString("channel_id");  //getting the channel id which is always WAP
          String tnx_amount=args.getJSONObject(0).getString("tnx_amount");//getting the total transaction amount to be passed on to the paytm sdk
          String industry_type_id=args.getJSONObject(0).getString("industry_type_id");  //the industry id generated by the merchant 
          String m_id=args.getJSONObject(0).getString("m_id");  //getting the merchant id
          Integer StagingOrProduction=args.getJSONObject(0).getInt("staging_value");//getting the staging value 
          Log.e("ionic paytm","  Order_id:"+Orderid+" Checksum:"+CHECKSUMHASH+" Callbackurl:"+Callbackurl + " customer_id: "+Customer_id+" mobile_no:"+mobile_no+" email:"+email+" web_staging:"+web_staging+" channel_id:"+channel_id+" tnx_amount:"+tnx_amount+" industry_type_id:"+industry_type_id );

          //logging the data in android studio
          PaytmPGService Service;//creating object of the paytmpgservice class
          if(StagingOrProduction==1){//if the staging or production value is 1 then it is staging value 
           Service = PaytmPGService.getStagingService();
          }else{//else then it is  production value
           Service = PaytmPGService.getProductionService();
          }
           //getting the staging service to tuen on
           HashMap<String, String> paramMap = new HashMap<String,String>();
            paramMap.put( "MID" ,m_id);//setting merachnd id
            paramMap.put( "ORDER_ID" ,Orderid);//setting the order id for paytm
            paramMap.put( "CUST_ID" ,Customer_id);//setting customer id  for paytm parameters
            paramMap.put( "MOBILE_NO",mobile_no);//setting mobile no  for paytm parameters
            paramMap.put( "EMAIL" ,email);//setting  email for paytm parameters
            paramMap.put( "CHANNEL_ID" ,channel_id);//setting channel  for paytm parameters
            paramMap.put( "TXN_AMOUNT" , tnx_amount);//setting total amount to get from user  for paytm parameters
            paramMap.put( "WEBSITE" , web_staging);//setting  for paytm parameters
            // This is the staging value. Production value is available in your dashboard
            paramMap.put( "INDUSTRY_TYPE_ID" ,industry_type_id);//setting industry id for paytm
            // This is the staging value. Production value is available in your dashboard
            paramMap.put( "CALLBACK_URL", Callbackurl);//setting the callback url for paytm
            paramMap.put( "CHECKSUMHASH" , CHECKSUMHASH);//setting the checksumhash for paytm
                      Log.e("ionic paytm","  Paytm paramap : " +paramMap  );
                    //logging the paytm param
            PaytmOrder Order = new PaytmOrder(paramMap);//setting the params into paytm order
            Service.initialize(Order, null);//intialize sdk

         Service.startPaymentTransaction(cordova.getActivity(), true, false, new PaytmPaymentTransactionCallback() {
             //start transaction proccess and calling sdk
                        /*Call Backs*/
                        
                       public void someUIErrorOccurred(String inErrorMessage) {
                           //if any ui error occurs then there will be errors
                           JSONObject paymentResponse = new JSONObject();//creating jsonobject that can be sent back to the js
                              try {
                               paymentResponse.put("Error",1);//error value 1
                               String Error_message="ui error "+inErrorMessage;//error message
                               paymentResponse.put("message",Error_message);//setting the error message
                                String jsonString = paymentResponse.toString(4);
                               //converting the json data to stringify format to pass on to the js
                                Log.e("data",""+inErrorMessage+" Json object "+jsonString);
                                ///logging data
                                callbackContext.error(jsonString);//passing stringified data because un stringified data will show error
                            } catch (JSONException e) {//if any error occurs then show errors
                                    e.printStackTrace();
                                    callbackContext.error("json convertion error "+e);
                            }
                   
                       }
                       public void onTransactionResponse(Bundle inResponse) {
                           //this function will be called when the transaction is completed either failed or successfull
                        JSONObject paymentResponse = new JSONObject();//creating jsonobject that can be sent back to the js
                                try {
                                        //puttinf try catch function in case of any issues in json
                               paymentResponse.put("STATUS", inResponse.getString("STATUS"));
                               paymentResponse.put("Error",0);
                               paymentResponse.put("ORDERID", inResponse.getString("ORDERID"));
                               paymentResponse.put("TXNID", inResponse.getString("TXNID"));
                               paymentResponse.put("TXNDATE", inResponse.getString("TXNDATE"));
                               paymentResponse.put("BANKTXNID", inResponse.getString("BANKTXNID"));
                               paymentResponse.put("CHECKSUMHASH", inResponse.getString("CHECKSUMHASH"));
                               paymentResponse.put("BANKNAME", inResponse.getString("BANKNAME"));
                               paymentResponse.put("MID", inResponse.getString("MID"));
                               paymentResponse.put("RESPCODE", inResponse.getString("RESPCODE"));
                               paymentResponse.put("PAYMENTMODE", inResponse.getString("PAYMENTMODE"));
                               paymentResponse.put("CURRENCY", inResponse.getString("CURRENCY"));
                               paymentResponse.put("GATEWAYNAME", inResponse.getString("GATEWAYNAME"));
                               paymentResponse.put("RESPMSG", inResponse.getString("RESPMSG"));
                               paymentResponse.put("TXNAMOUNT", inResponse.getString("TXNAMOUNT"));
                         
                               String jsonString = paymentResponse.toString(4);
                               //converting the json data to stringify format to pass on to the js
                               Log.e("data",""+inResponse+" Json object "+jsonString);
                               callbackContext.success(jsonString);//passing stringified data because un stringified data will show error
                           } catch (JSONException e) {//if any error occurs then show errors
                               e.printStackTrace();
                               //printing error stack trace
                                callbackContext.error("json convertion error "+e);
                           }


                       }
                       public void networkNotAvailable() {
                           //if no network available then show no network available error
                            JSONObject paymentResponse = new JSONObject();//creating jsonobject that can be sent back to the js
                              try {
                                //putting try catch function in case of any issues in json
                               paymentResponse.put("Error",1);//error value to 1
                               paymentResponse.put("message","no internet connection");//adding the message to say no internet connection
                                      String jsonString = paymentResponse.toString(4);
                               //converting the json data to stringify format to pass on to the js
                               Log.e("data"," Json object "+jsonString);
                               //logging the data
                               callbackContext.error(jsonString);//passing stringified data because un stringified data will show error
                            } catch (JSONException e) {//if any error occurs then show errors
                                   e.printStackTrace();
                                    callbackContext.error("json convertion error "+e);
                            }
                        }
                       public void clientAuthenticationFailed(String inErrorMessage) {
                            
                        JSONObject paymentResponse = new JSONObject();//creating jsonobject that can be sent back to the js
                              try {

                                String Authentication_Error="client authentication error "+inErrorMessage;
                                        //putting try catch function in case of any issues in json
                                        paymentResponse.put("Error",1);
                                        paymentResponse.put("message",Authentication_Error);
                                        String jsonString = paymentResponse.toString(4);
                               //converting the json data to stringify format to pass on to the js
                                Log.e("data",""+inErrorMessage+" Json object "+jsonString);
                                callbackContext.error(jsonString);//passing stringified data because un stringified data will show error
                            } catch (JSONException e) {//if any error occurs then show errors
                                    e.printStackTrace();
                                    callbackContext.error("json convertion error "+e);
                            }
                   
                       }
                       public void onErrorLoadingWebPage(int iniErrorCode, String inErrorMessage, String inFailingUrl) {
                        
                        JSONObject paymentResponse = new JSONObject();//creating jsonobject that can be sent back to the js
                              try {

                               paymentResponse.put("Error",1);
                               String Error_message="on error loading "+iniErrorCode + " "+ inErrorMessage+" "+inFailingUrl;
                               paymentResponse.put("message",Error_message);
                                String jsonString = paymentResponse.toString(4);
                               //converting the json data to stringify format to pass on to the js
                                Log.e("data",""+inErrorMessage+" Json object "+jsonString);
                                callbackContext.error(jsonString);//passing stringified data because un stringified data will show error
                            } catch (JSONException e) {//if any error occurs then show errors
                                    e.printStackTrace();
                                    callbackContext.error("json convertion error "+e);
                            }
                   
                     
                       }
                       public void onBackPressedCancelTransaction() {
                         JSONObject paymentResponse = new JSONObject();//creating jsonobject that can be sent back to the js
                              try {

                               paymentResponse.put("Error",1);
                               String Error_message=" back button pressed and transaction cancelled";
                               paymentResponse.put("message",Error_message);
                                String jsonString = paymentResponse.toString(4);
                               //converting the json data to stringify format to pass on to the js
                                Log.e("error","error transaction back cancelled");
                                callbackContext.error(jsonString);//passing stringified data because un stringified data will show error
                            } catch (JSONException e) {//if any error occurs then show errors
                                   e.printStackTrace();
                                    callbackContext.error("json convertion error "+e);
                            }

                        }

                       public void onTransactionCancel(String inErrorMessage, Bundle inResponse) {

                        JSONObject paymentResponse = new JSONObject();//creating jsonobject that can be sent back to the js
                              try {

                               paymentResponse.put("Error",1);
                               String Error_message="transaction cancelled because of "+inErrorMessage + " In Response data "+ inResponse+" ";
                               paymentResponse.put("message",Error_message);
                                String jsonString = paymentResponse.toString(4);
                               //converting the json data to stringify format to pass on to the js
                                Log.e("data","error  "+inErrorMessage+" Json object "+jsonString);
                                callbackContext.error(jsonString);//passing stringified data because un stringified data will show error
                            } catch (JSONException e) {//if any error occurs then show errors
                                e.printStackTrace();
                                    callbackContext.error("json convertion error "+e);
                            }
                   
                       }
     });
       }catch(Exception e){
            Log.e("errors","error"+e);
                  callbackContext.error("Errors "+ e );

        }  
    
    }

   
  

}
